plugins {
    id 'com.palantir.git-version' version '0.12.3'
    id 'java-library'
    id 'maven-publish'
    id 'signing'
    id 'idea'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'org.sonarqube' version '3.3'
    id 'com.diffplug.spotless' version '6.0.0'
    id 'jacoco'
}

group = 'engineering.everest.starterkit'

def gitTagVersion = versionDetails()
version = gitTagVersion.commitDistance == 0
        ? gitTagVersion.lastTag
        : "${gitTagVersion.lastTag}+${gitTagVersion.commitDistance}-SNAPSHOT"

ext {
    storageVersion = '0.9.10'

    lombokVersion = '1.18.22'
    metadataExtractorVersion = '2.16.0'
    springBootVersion = '2.6.0'
    thumbnailatorVersion = '0.4.14'

    junitVersion = '5.8.1'
    mockitoVersion = '4.0.0'
    h2Version = '1.4.200'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
    }
}

dependencies {
    api "engineering.everest.starterkit:storage:${storageVersion}"

    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation "net.coobird:thumbnailator:${thumbnailatorVersion}"
    implementation "com.drewnoakes:metadata-extractor:${metadataExtractorVersion}"

    testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
    testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    testImplementation 'org.springframework:spring-test'
    testImplementation 'org.springframework.boot:spring-boot-test-autoconfigure'
    testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
    testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
    testRuntimeOnly "com.h2database:h2:${h2Version}"
}

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(11)
    }
    java {
        withJavadocJar()
        withSourcesJar()
    }
}

spotless {
    format 'misc', {
        target '*.gradle', '*.md', '.gitignore'
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
    java {
        eclipse().configFile("$rootDir/eclipse-formatter-config.xml")
        indentWithSpaces(4)
        trimTrailingWhitespace()
        removeUnusedImports()
    }
}

repositories {
    mavenCentral()
    mavenLocal()
}

test {
    useJUnitPlatform()
}

apply from: 'publishing.gradle'
apply from: 'sonar.gradle'
